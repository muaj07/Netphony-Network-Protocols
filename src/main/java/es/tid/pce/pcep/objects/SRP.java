package es.tid.pce.pcep.objects;

import es.tid.pce.pcep.objects.tlvs.PCEPTLV;
import es.tid.pce.pcep.objects.tlvs.PathSetupTLV;
import es.tid.pce.pcep.objects.tlvs.SymbolicPathNameTLV;
import es.tid.protocol.commons.ByteHandler;

/**
 * SRP Object.
 * The SRP (Stateful PCE Request Parameters) object MUST be carried
   within each PCUpd and PCRpt message and MAY be carried within PCNtf
   and PCEerr messages.  The SRP object is used to correlate between
   update requests sent by the PCE and the error reports and state
   reports sent by the PCC.  The P flag in the common object header of
   the SRP object MUST be set to 0.

   SRP Object-Class is [TBD].

   SRP Object-Type is 1.

   The format of the SRP object body is shown in Figure 17:


              0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Flags                              |R|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                        SRP-ID-number                          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      //                      Optional TLVs                          //
      |                                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


                     Figure 17: The SRP Object format

   The SRP object body has a variable length and may contain additional
   TLVs.  The SYMBOLIC-PATH-NAME TLV MAY be included as one of the
   optional TLVs.

   Flags (32 bits): None defined yet.

   SRP-ID-number (32 bits): The SRP-ID-number value combined with the
   source IP address of the PCC and the PCE uniquely identify the
   operation that the PCE has requested the PCC to perform on a given
   LSP.  The SRP-ID-number is incremented each time a new request is
   sent to the PCC, and may wrap around.

   The values 0x00000000 and 0xFFFFFFFF are reserved.

   Every request to update an LSP receives a new SRP-ID-number.  This
   number is unique per PCEP session and is incremented each time an
   operation is requested from the PCE.  Thus, for a given LSP there may
   be more than one SRP-id-number unacknowledged at a given time.  The
   value of the SRP-ID-number is echoed back by the PCC in PCErr and
   PCRpt messages to allow for correlation between requests made by the
   PCE and errors or state reports generated by the PCC.  If the error
   or report were not as a result of a PCE operation (for example in the
   case of a link down event), then the reserved value of 0x00000000 is
   used instead.  An SRP-ID-number is considered unacknowledged and
   cannot be reused until a PCErr or PCRpt arrives with an SRP-ID-number
   equal or higher for the same LSP.  A PCRpt with state "Pending" is
   not considered as an acknowledgement.
   
 * @author jaume fixed by ogondio
 *
 */

public class SRP extends PCEPObject
{

	private long SRP_ID_number;

	private SymbolicPathNameTLV symPathName;

	private boolean rFlag;

	private PathSetupTLV pathSetupTLV;


	public SRP()
	{
		super();
		this.setObjectClass(ObjectParameters.PCEP_OBJECT_CLASS_SRP);
		this.setOT(1);
	}

	public SRP(byte []bytes, int offset)throws MalformedPCEPObjectException 
	{
		super(bytes, offset);
		decode();
	}

	public void encode() 
	{
		ObjectLength = 4 + 4 + 4;
		if (symPathName!=null)
		{
			symPathName.encode();
			ObjectLength=ObjectLength+symPathName.getTotalTLVLength();
		}

		if (pathSetupTLV!=null){
			try {
				pathSetupTLV.encode();
				this.ObjectLength+=pathSetupTLV.getTotalTLVLength();	

			}catch (Exception e){
				log.warn(e.getMessage());
			}

		}
		object_bytes = new byte[ObjectLength];
		encode_header();		
		int offset = 4;
		offset += 3;
		ByteHandler.BoolToBuffer(7 + offset*8, rFlag,object_bytes);

		offset += 1;
		//FIXME
		ByteHandler.IntToBuffer(0,offset*8, 32,(int)SRP_ID_number,this.object_bytes);

		offset += 4;

		if (symPathName != null)
		{
			System.arraycopy(symPathName.getTlv_bytes(),0,this.object_bytes,offset,symPathName.getTotalTLVLength());
			offset=offset+symPathName.getTotalTLVLength();
		}

		if (pathSetupTLV!=null){
			System.arraycopy(pathSetupTLV.getTlv_bytes(), 0,this.object_bytes, offset, pathSetupTLV.getTotalTLVLength());
			offset += pathSetupTLV.getTotalTLVLength();
		}

	}

	@Override
	public void decode() throws MalformedPCEPObjectException 
	{

		if (ObjectLength<12){
			throw new MalformedPCEPObjectException();
		}

		rFlag = (ByteHandler.easyCopy(7,7,object_bytes[7]) == 1) ? true : false ;

		SRP_ID_number = ByteHandler.easyCopy(0,31,object_bytes[8],object_bytes[9],object_bytes[10],object_bytes[11]);

		boolean fin;
		int offset = 12;

		if (ObjectLength==12){
			fin=true;
		}else {
			fin = false;
		}

		while (!fin) {
			int tlvtype=PCEPTLV.getType(this.getObject_bytes(), offset);
			int tlvlength=PCEPTLV.getTotalTLVLength(this.getObject_bytes(), offset);

			switch (tlvtype){
				case ObjectParameters.PCEP_TLV_TYPE_SYMBOLIC_PATH_NAME:
					symPathName=new SymbolicPathNameTLV(this.getObject_bytes(), offset);
					break;		
				case ObjectParameters.PCEP_TLV_PATH_SETUP:
					pathSetupTLV=new PathSetupTLV(this.getObject_bytes(), offset);				
					break;								
				default:
					log.warn("Unknown or unexpected TLV found");
					//FIXME: Que hacemos con los desconocidos
					break;
			}

			offset=offset+tlvlength;
			if (offset>=ObjectLength){
				fin=true;
			}
		}		
	}

	public long getSRP_ID_number() 
	{
		return SRP_ID_number;
	}

	public void setSRP_ID_number(long sRP_ID_number) 
	{
		SRP_ID_number = sRP_ID_number;
	}

	public SymbolicPathNameTLV getSymPathName() 
	{
		return symPathName;
	}

	public void setSymPathName(SymbolicPathNameTLV symPathName) 
	{
		this.symPathName = symPathName;
	}

	public boolean isrFlag() 
	{
		return rFlag;
	}

	public void setRFlag(boolean rFlag) 
	{
		this.rFlag = rFlag;
	}

	public PathSetupTLV getPathSetupTLV() {
		return pathSetupTLV;
	}

	public void setPathSetupTLV(PathSetupTLV pathSetupTLV) {
		this.pathSetupTLV = pathSetupTLV;
	}

	public String toString() {
		StringBuffer sb=new StringBuffer(100);
		sb.append("<SRP id = ");
		sb.append(SRP_ID_number);	
		if (symPathName!=null){
			sb.append(symPathName.toString());
		}
		sb.append(">");
		return sb.toString();	
	}

}